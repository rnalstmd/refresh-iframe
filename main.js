/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => IframeReloaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var IframeReloaderPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Iframe Reloader Plugin loaded");
    this.addRibbonIcon("refresh-cw", "Reload iframe", () => {
      this.reloadIframe();
    });
    this.addCommand({
      id: "reload-iframe",
      name: "Reload iframe in the current note",
      callback: () => this.reloadIframe()
    });
  }
  reloadIframe() {
    const leaf = this.app.workspace.activeLeaf;
    if (!leaf) {
      new import_obsidian.Notice("No active note found.");
      return;
    }
    const iframes = document.querySelectorAll("iframe");
    if (iframes.length === 0) {
      new import_obsidian.Notice("No iframe found in the current note.");
      return;
    }
    if (iframes.length === 1) {
      const iframe = iframes[0];
      const src = iframe.getAttribute("src");
      if (src) {
        iframe.setAttribute("src", src);
        new import_obsidian.Notice("Iframe reloaded successfully.");
      } else {
        new import_obsidian.Notice("Iframe found but no src attribute present.");
      }
      return;
    }
    const options = Array.from(iframes).map((iframe, index) => {
      const src = iframe.getAttribute("src") || "No src";
      return `Iframe ${index + 1}: ${src}`;
    });
    const userChoice = prompt(
      `Select an iframe to reload:

${options.join("\n")}

Enter the number (1-${iframes.length}):`
    );
    if (!userChoice) {
      new import_obsidian.Notice("Iframe reload canceled.");
      return;
    }
    const selectedIndex = parseInt(userChoice, 10) - 1;
    if (isNaN(selectedIndex) || selectedIndex < 0 || selectedIndex >= iframes.length) {
      new import_obsidian.Notice("Invalid selection.");
      return;
    }
    const selectedIframe = iframes[selectedIndex];
    const selectedSrc = selectedIframe.getAttribute("src");
    if (selectedSrc) {
      selectedIframe.setAttribute("src", selectedSrc);
      new import_obsidian.Notice(`Iframe ${selectedIndex + 1} reloaded successfully.`);
    } else {
      new import_obsidian.Notice(`Iframe ${selectedIndex + 1} has no src attribute.`);
    }
  }
  onunload() {
    console.log("Iframe Reloader Plugin unloaded");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBXb3Jrc3BhY2VMZWFmLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWZyYW1lUmVsb2FkZXJQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuICBhc3luYyBvbmxvYWQoKSB7XG4gICAgY29uc29sZS5sb2coXCJJZnJhbWUgUmVsb2FkZXIgUGx1Z2luIGxvYWRlZFwiKTtcblxuICAgIC8vIFx1QjlBQ1x1QkNGOCBcdUM1NDRcdUM3NzRcdUNGNTggXHVDRDk0XHVBQzAwXG4gICAgdGhpcy5hZGRSaWJib25JY29uKFwicmVmcmVzaC1jd1wiLCBcIlJlbG9hZCBpZnJhbWVcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5yZWxvYWRJZnJhbWUoKTtcbiAgICB9KTtcblxuICAgIC8vIFx1QkE4NVx1QjgzOVx1QzVCNCBcdUNEOTRcdUFDMDBcbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6IFwicmVsb2FkLWlmcmFtZVwiLFxuICAgICAgbmFtZTogXCJSZWxvYWQgaWZyYW1lIGluIHRoZSBjdXJyZW50IG5vdGVcIixcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLnJlbG9hZElmcmFtZSgpLFxuICAgIH0pO1xuICB9XG5cbiAgcmVsb2FkSWZyYW1lKCkge1xuICAgIGNvbnN0IGxlYWY6IFdvcmtzcGFjZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcblxuICAgIGlmICghbGVhZikge1xuICAgICAgbmV3IE5vdGljZShcIk5vIGFjdGl2ZSBub3RlIGZvdW5kLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBcdUJBQThcdUI0RTAgaWZyYW1lIFx1QzY5NFx1QzE4QyBcdUFDMDBcdUM4MzhcdUM2MjRcdUFFMzBcbiAgICBjb25zdCBpZnJhbWVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImlmcmFtZVwiKTtcblxuICAgIGlmIChpZnJhbWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbmV3IE5vdGljZShcIk5vIGlmcmFtZSBmb3VuZCBpbiB0aGUgY3VycmVudCBub3RlLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaWZyYW1lcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIC8vIGlmcmFtZVx1Qzc3NCBcdUQ1NThcdUIwOThcdUM3NzggXHVBQ0JEXHVDNkIwIFx1QkMxNFx1Qjg1QyBcdUI5QUNcdUI4NUNcdUI0RENcbiAgICAgIGNvbnN0IGlmcmFtZSA9IGlmcmFtZXNbMF07XG4gICAgICBjb25zdCBzcmMgPSBpZnJhbWUuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgaWYgKHNyYykge1xuICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJJZnJhbWUgcmVsb2FkZWQgc3VjY2Vzc2Z1bGx5LlwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJJZnJhbWUgZm91bmQgYnV0IG5vIHNyYyBhdHRyaWJ1dGUgcHJlc2VudC5cIik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gaWZyYW1lXHVDNzc0IFx1QzVFQ1x1QjdFQyBcdUFDMUNcdUM3NzggXHVBQ0JEXHVDNkIwIFx1QzBBQ1x1QzZBOVx1Qzc5MCBcdUMxMjBcdUQwRERcbiAgICBjb25zdCBvcHRpb25zID0gQXJyYXkuZnJvbShpZnJhbWVzKS5tYXAoKGlmcmFtZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHNyYyA9IGlmcmFtZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgfHwgXCJObyBzcmNcIjtcbiAgICAgIHJldHVybiBgSWZyYW1lICR7aW5kZXggKyAxfTogJHtzcmN9YDtcbiAgICB9KTtcblxuICAgIGNvbnN0IHVzZXJDaG9pY2UgPSBwcm9tcHQoXG4gICAgICBgU2VsZWN0IGFuIGlmcmFtZSB0byByZWxvYWQ6XFxuXFxuJHtvcHRpb25zLmpvaW4oXCJcXG5cIil9XFxuXFxuRW50ZXIgdGhlIG51bWJlciAoMS0ke2lmcmFtZXMubGVuZ3RofSk6YFxuICAgICk7XG5cbiAgICBpZiAoIXVzZXJDaG9pY2UpIHtcbiAgICAgIG5ldyBOb3RpY2UoXCJJZnJhbWUgcmVsb2FkIGNhbmNlbGVkLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWxlY3RlZEluZGV4ID0gcGFyc2VJbnQodXNlckNob2ljZSwgMTApIC0gMTtcbiAgICBpZiAoaXNOYU4oc2VsZWN0ZWRJbmRleCkgfHwgc2VsZWN0ZWRJbmRleCA8IDAgfHwgc2VsZWN0ZWRJbmRleCA+PSBpZnJhbWVzLmxlbmd0aCkge1xuICAgICAgbmV3IE5vdGljZShcIkludmFsaWQgc2VsZWN0aW9uLlwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBcdUMxMjBcdUQwRERcdUI0MUMgaWZyYW1lIFx1QjlBQ1x1Qjg1Q1x1QjREQ1xuICAgIGNvbnN0IHNlbGVjdGVkSWZyYW1lID0gaWZyYW1lc1tzZWxlY3RlZEluZGV4XTtcbiAgICBjb25zdCBzZWxlY3RlZFNyYyA9IHNlbGVjdGVkSWZyYW1lLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICBpZiAoc2VsZWN0ZWRTcmMpIHtcbiAgICAgIHNlbGVjdGVkSWZyYW1lLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzZWxlY3RlZFNyYyk7XG4gICAgICBuZXcgTm90aWNlKGBJZnJhbWUgJHtzZWxlY3RlZEluZGV4ICsgMX0gcmVsb2FkZWQgc3VjY2Vzc2Z1bGx5LmApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXcgTm90aWNlKGBJZnJhbWUgJHtzZWxlY3RlZEluZGV4ICsgMX0gaGFzIG5vIHNyYyBhdHRyaWJ1dGUuYCk7XG4gICAgfVxuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgY29uc29sZS5sb2coXCJJZnJhbWUgUmVsb2FkZXIgUGx1Z2luIHVubG9hZGVkXCIpO1xuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQThDO0FBRTlDLElBQXFCLHVCQUFyQixjQUFrRCx1QkFBTztBQUFBLEVBQ3ZELE1BQU0sU0FBUztBQUNiLFlBQVEsSUFBSSwrQkFBK0I7QUFHM0MsU0FBSyxjQUFjLGNBQWMsaUJBQWlCLE1BQU07QUFDdEQsV0FBSyxhQUFhO0FBQUEsSUFDcEIsQ0FBQztBQUdELFNBQUssV0FBVztBQUFBLE1BQ2QsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLEtBQUssYUFBYTtBQUFBLElBQ3BDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxlQUFlO0FBQ2IsVUFBTSxPQUFzQixLQUFLLElBQUksVUFBVTtBQUUvQyxRQUFJLENBQUMsTUFBTTtBQUNULFVBQUksdUJBQU8sdUJBQXVCO0FBQ2xDO0FBQUEsSUFDRjtBQUdBLFVBQU0sVUFBVSxTQUFTLGlCQUFpQixRQUFRO0FBRWxELFFBQUksUUFBUSxXQUFXLEdBQUc7QUFDeEIsVUFBSSx1QkFBTyxzQ0FBc0M7QUFDakQ7QUFBQSxJQUNGO0FBRUEsUUFBSSxRQUFRLFdBQVcsR0FBRztBQUV4QixZQUFNLFNBQVMsUUFBUSxDQUFDO0FBQ3hCLFlBQU0sTUFBTSxPQUFPLGFBQWEsS0FBSztBQUNyQyxVQUFJLEtBQUs7QUFDUCxlQUFPLGFBQWEsT0FBTyxHQUFHO0FBQzlCLFlBQUksdUJBQU8sK0JBQStCO0FBQUEsTUFDNUMsT0FBTztBQUNMLFlBQUksdUJBQU8sNENBQTRDO0FBQUEsTUFDekQ7QUFDQTtBQUFBLElBQ0Y7QUFHQSxVQUFNLFVBQVUsTUFBTSxLQUFLLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxVQUFVO0FBQ3pELFlBQU0sTUFBTSxPQUFPLGFBQWEsS0FBSyxLQUFLO0FBQzFDLGFBQU8sVUFBVSxRQUFRLE1BQU07QUFBQSxJQUNqQyxDQUFDO0FBRUQsVUFBTSxhQUFhO0FBQUEsTUFDakI7QUFBQTtBQUFBLEVBQWtDLFFBQVEsS0FBSyxJQUFJO0FBQUE7QUFBQSxzQkFBNEIsUUFBUTtBQUFBLElBQ3pGO0FBRUEsUUFBSSxDQUFDLFlBQVk7QUFDZixVQUFJLHVCQUFPLHlCQUF5QjtBQUNwQztBQUFBLElBQ0Y7QUFFQSxVQUFNLGdCQUFnQixTQUFTLFlBQVksRUFBRSxJQUFJO0FBQ2pELFFBQUksTUFBTSxhQUFhLEtBQUssZ0JBQWdCLEtBQUssaUJBQWlCLFFBQVEsUUFBUTtBQUNoRixVQUFJLHVCQUFPLG9CQUFvQjtBQUMvQjtBQUFBLElBQ0Y7QUFHQSxVQUFNLGlCQUFpQixRQUFRLGFBQWE7QUFDNUMsVUFBTSxjQUFjLGVBQWUsYUFBYSxLQUFLO0FBQ3JELFFBQUksYUFBYTtBQUNmLHFCQUFlLGFBQWEsT0FBTyxXQUFXO0FBQzlDLFVBQUksdUJBQU8sVUFBVSxnQkFBZ0IsMEJBQTBCO0FBQUEsSUFDakUsT0FBTztBQUNMLFVBQUksdUJBQU8sVUFBVSxnQkFBZ0IseUJBQXlCO0FBQUEsSUFDaEU7QUFBQSxFQUNGO0FBQUEsRUFFQSxXQUFXO0FBQ1QsWUFBUSxJQUFJLGlDQUFpQztBQUFBLEVBQy9DO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==
