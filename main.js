/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => IframeReloaderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var IframeReloaderPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Iframe Reloader Plugin loaded");
    this.addRibbonIcon("refresh-cw", "Reload iframe", () => {
      console.log("Ribbon button clicked!");
      this.reloadIframe();
    });
    this.addCommand({
      id: "reload-iframe",
      name: "Reload iframe in the current note",
      callback: () => this.reloadIframe()
    });
  }
  reloadIframe() {
    console.log("Reloading iframes...");
    const iframes = document.querySelectorAll("iframe");
    console.log("Found iframes:", iframes);
    if (iframes.length === 0) {
      new import_obsidian.Notice("No iframe found in the current note.");
      return;
    }
    if (iframes.length === 1) {
      const iframe = iframes[0];
      const src = iframe.getAttribute("src");
      if (src) {
        iframe.setAttribute("src", src);
        new import_obsidian.Notice("Iframe reloaded successfully.");
      } else {
        new import_obsidian.Notice("Iframe found but no src attribute present.");
      }
      return;
    }
    new IframeSelectorModal(this.app, iframes).open();
  }
  onunload() {
    console.log("Iframe Reloader Plugin unloaded");
  }
};
var IframeSelectorModal = class extends import_obsidian.Modal {
  constructor(app, iframes) {
    super(app);
    this.iframes = iframes;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Select an iframe to reload" });
    this.iframes.forEach((iframe, index) => {
      const src = iframe.getAttribute("src") || "No src";
      new import_obsidian.Setting(contentEl).setName(`Iframe ${index + 1}`).setDesc(src).addButton(
        (btn) => btn.setButtonText("Reload").onClick(() => {
          const src2 = iframe.getAttribute("src");
          if (src2) {
            iframe.setAttribute("src", src2);
            new import_obsidian.Notice(`Iframe ${index + 1} reloaded successfully.`);
          } else {
            new import_obsidian.Notice(`Iframe ${index + 1} has no src attribute.`);
          }
          this.close();
        })
      );
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBOb3RpY2UsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElmcmFtZVJlbG9hZGVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgYXN5bmMgb25sb2FkKCkge1xuICAgIGNvbnNvbGUubG9nKFwiSWZyYW1lIFJlbG9hZGVyIFBsdWdpbiBsb2FkZWRcIik7XG5cbiAgICAvLyBcdUI5QUNcdUJDRjggXHVDNTQ0XHVDNzc0XHVDRjU4IFx1Q0Q5NFx1QUMwMFxuICAgIHRoaXMuYWRkUmliYm9uSWNvbihcInJlZnJlc2gtY3dcIiwgXCJSZWxvYWQgaWZyYW1lXCIsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFwiUmliYm9uIGJ1dHRvbiBjbGlja2VkIVwiKTtcbiAgICAgIHRoaXMucmVsb2FkSWZyYW1lKCk7XG4gICAgfSk7XG5cbiAgICAvLyBcdUJBODVcdUI4MzlcdUM1QjQgXHVDRDk0XHVBQzAwXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiBcInJlbG9hZC1pZnJhbWVcIixcbiAgICAgIG5hbWU6IFwiUmVsb2FkIGlmcmFtZSBpbiB0aGUgY3VycmVudCBub3RlXCIsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5yZWxvYWRJZnJhbWUoKSxcbiAgICB9KTtcbiAgfVxuXG4gIHJlbG9hZElmcmFtZSgpIHtcbiAgICBjb25zb2xlLmxvZyhcIlJlbG9hZGluZyBpZnJhbWVzLi4uXCIpO1xuICAgIC8vIFx1QkFBOFx1QjRFMCBpZnJhbWUgXHVDNjk0XHVDMThDIFx1QUMwMFx1QzgzOFx1QzYyNFx1QUUzMFxuICAgIGNvbnN0IGlmcmFtZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiaWZyYW1lXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiRm91bmQgaWZyYW1lczpcIiwgaWZyYW1lcyk7XG5cbiAgICBpZiAoaWZyYW1lcy5sZW5ndGggPT09IDApIHtcbiAgICAgIG5ldyBOb3RpY2UoXCJObyBpZnJhbWUgZm91bmQgaW4gdGhlIGN1cnJlbnQgbm90ZS5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlmcmFtZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAvLyBpZnJhbWVcdUM3NzQgXHVENTU4XHVCMDk4XHVDNzdDIFx1QUNCRFx1QzZCMCBcdUM5ODlcdUMyREMgXHVCOUFDXHVCODVDXHVCNERDXG4gICAgICBjb25zdCBpZnJhbWUgPSBpZnJhbWVzWzBdO1xuICAgICAgY29uc3Qgc3JjID0gaWZyYW1lLmdldEF0dHJpYnV0ZShcInNyY1wiKTtcbiAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpOyAvLyBcdUI5QUNcdUI4NUNcdUI0RENcbiAgICAgICAgbmV3IE5vdGljZShcIklmcmFtZSByZWxvYWRlZCBzdWNjZXNzZnVsbHkuXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3IE5vdGljZShcIklmcmFtZSBmb3VuZCBidXQgbm8gc3JjIGF0dHJpYnV0ZSBwcmVzZW50LlwiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBcdUM1RUNcdUI3RUMgaWZyYW1lXHVDNzc0IFx1Qzc4OFx1QjI5NCBcdUFDQkRcdUM2QjAgTW9kYWxcdUI4NUMgXHVDMTIwXHVEMEREXHVDQzNEIFx1RDQ1Q1x1QzJEQ1xuICAgIG5ldyBJZnJhbWVTZWxlY3Rvck1vZGFsKHRoaXMuYXBwLCBpZnJhbWVzKS5vcGVuKCk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIklmcmFtZSBSZWxvYWRlciBQbHVnaW4gdW5sb2FkZWRcIik7XG4gIH1cbn1cblxuY2xhc3MgSWZyYW1lU2VsZWN0b3JNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgaWZyYW1lczogTm9kZUxpc3RPZjxIVE1MSUZyYW1lRWxlbWVudD47XG5cbiAgY29uc3RydWN0b3IoYXBwOiBhbnksIGlmcmFtZXM6IE5vZGVMaXN0T2Y8SFRNTElGcmFtZUVsZW1lbnQ+KSB7XG4gICAgc3VwZXIoYXBwKTtcbiAgICB0aGlzLmlmcmFtZXMgPSBpZnJhbWVzO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXG4gICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIlNlbGVjdCBhbiBpZnJhbWUgdG8gcmVsb2FkXCIgfSk7XG5cbiAgICAvLyBcdUFDMDEgaWZyYW1lXHVDNUQwIFx1QjMwMFx1RDU3NCBcdUJDODRcdUQyQkMgXHVDRDk0XHVBQzAwXG4gICAgdGhpcy5pZnJhbWVzLmZvckVhY2goKGlmcmFtZSwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHNyYyA9IGlmcmFtZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgfHwgXCJObyBzcmNcIjtcbiAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgLnNldE5hbWUoYElmcmFtZSAke2luZGV4ICsgMX1gKVxuICAgICAgICAuc2V0RGVzYyhzcmMpXG4gICAgICAgIC5hZGRCdXR0b24oKGJ0bikgPT5cbiAgICAgICAgICBidG5cbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiUmVsb2FkXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNyYyA9IGlmcmFtZS5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XG4gICAgICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSWZyYW1lICR7aW5kZXggKyAxfSByZWxvYWRlZCBzdWNjZXNzZnVsbHkuYCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgSWZyYW1lICR7aW5kZXggKyAxfSBoYXMgbm8gc3JjIGF0dHJpYnV0ZS5gKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgb25DbG9zZSgpIHtcbiAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICBjb250ZW50RWwuZW1wdHkoKTtcbiAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUErQztBQUUvQyxJQUFxQix1QkFBckIsY0FBa0QsdUJBQU87QUFBQSxFQUN2RCxNQUFNLFNBQVM7QUFDYixZQUFRLElBQUksK0JBQStCO0FBRzNDLFNBQUssY0FBYyxjQUFjLGlCQUFpQixNQUFNO0FBQ3RELGNBQVEsSUFBSSx3QkFBd0I7QUFDcEMsV0FBSyxhQUFhO0FBQUEsSUFDcEIsQ0FBQztBQUdELFNBQUssV0FBVztBQUFBLE1BQ2QsSUFBSTtBQUFBLE1BQ0osTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNLEtBQUssYUFBYTtBQUFBLElBQ3BDLENBQUM7QUFBQSxFQUNIO0FBQUEsRUFFQSxlQUFlO0FBQ2IsWUFBUSxJQUFJLHNCQUFzQjtBQUVsQyxVQUFNLFVBQVUsU0FBUyxpQkFBaUIsUUFBUTtBQUNsRCxZQUFRLElBQUksa0JBQWtCLE9BQU87QUFFckMsUUFBSSxRQUFRLFdBQVcsR0FBRztBQUN4QixVQUFJLHVCQUFPLHNDQUFzQztBQUNqRDtBQUFBLElBQ0Y7QUFFQSxRQUFJLFFBQVEsV0FBVyxHQUFHO0FBRXhCLFlBQU0sU0FBUyxRQUFRLENBQUM7QUFDeEIsWUFBTSxNQUFNLE9BQU8sYUFBYSxLQUFLO0FBQ3JDLFVBQUksS0FBSztBQUNQLGVBQU8sYUFBYSxPQUFPLEdBQUc7QUFDOUIsWUFBSSx1QkFBTywrQkFBK0I7QUFBQSxNQUM1QyxPQUFPO0FBQ0wsWUFBSSx1QkFBTyw0Q0FBNEM7QUFBQSxNQUN6RDtBQUNBO0FBQUEsSUFDRjtBQUdBLFFBQUksb0JBQW9CLEtBQUssS0FBSyxPQUFPLEVBQUUsS0FBSztBQUFBLEVBQ2xEO0FBQUEsRUFFQSxXQUFXO0FBQ1QsWUFBUSxJQUFJLGlDQUFpQztBQUFBLEVBQy9DO0FBQ0Y7QUFFQSxJQUFNLHNCQUFOLGNBQWtDLHNCQUFNO0FBQUEsRUFHdEMsWUFBWSxLQUFVLFNBQXdDO0FBQzVELFVBQU0sR0FBRztBQUNULFNBQUssVUFBVTtBQUFBLEVBQ2pCO0FBQUEsRUFFQSxTQUFTO0FBQ1AsVUFBTSxFQUFFLFVBQVUsSUFBSTtBQUV0QixjQUFVLFNBQVMsTUFBTSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHL0QsU0FBSyxRQUFRLFFBQVEsQ0FBQyxRQUFRLFVBQVU7QUFDdEMsWUFBTSxNQUFNLE9BQU8sYUFBYSxLQUFLLEtBQUs7QUFDMUMsVUFBSSx3QkFBUSxTQUFTLEVBQ2xCLFFBQVEsVUFBVSxRQUFRLEdBQUcsRUFDN0IsUUFBUSxHQUFHLEVBQ1g7QUFBQSxRQUFVLENBQUMsUUFDVixJQUNHLGNBQWMsUUFBUSxFQUN0QixRQUFRLE1BQU07QUFDYixnQkFBTUEsT0FBTSxPQUFPLGFBQWEsS0FBSztBQUNyQyxjQUFJQSxNQUFLO0FBQ1AsbUJBQU8sYUFBYSxPQUFPQSxJQUFHO0FBQzlCLGdCQUFJLHVCQUFPLFVBQVUsUUFBUSwwQkFBMEI7QUFBQSxVQUN6RCxPQUFPO0FBQ0wsZ0JBQUksdUJBQU8sVUFBVSxRQUFRLHlCQUF5QjtBQUFBLFVBQ3hEO0FBQ0EsZUFBSyxNQUFNO0FBQUEsUUFDYixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0osQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFVBQVU7QUFDUixVQUFNLEVBQUUsVUFBVSxJQUFJO0FBQ3RCLGNBQVUsTUFBTTtBQUFBLEVBQ2xCO0FBQ0Y7IiwKICAibmFtZXMiOiBbInNyYyJdCn0K
